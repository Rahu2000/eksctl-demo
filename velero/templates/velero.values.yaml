---
image: {}
  # repository: velero/velero
  # tag: v1.5.3
  # pullPolicy: IfNotPresent
  # imagePullSecrets: []
  # # - registrySecretName

annotations: {}
# secret.reloader.stakater.com/reload: "<VELERO_SECRET_NAME>"

# Labels to add to the Velero deployment's. Optional.
labels: {}

podAnnotations: {}
  #  iam.amazonaws.com/role: "arn:aws:iam::<AWS_ACCOUNT_ID>:role/<VELERO_ROLE_NAME>"

podLabels: {}

resources: {}
  # limits:
  #   memory: 512Mi
  # requests:
  #   cpu: 256m
  #   memory: 512Mi

dnsPolicy: ClusterFirst

initContainers:
  - name: velero-plugin-for-aws
    image: velero/velero-plugin-for-aws:AWS_CSI_VERSION
    imagePullPolicy: IfNotPresent
    volumeMounts:
      - mountPath: /target
        name: plugins
  - name: velero-plugin-for-csi
    image: velero/velero-plugin-for-csi:VELERO_CSI_VERSION
    volumeMounts:
      - name: plugins
        mountPath: /target

securityContext:
  fsGroup: 1337

priorityClassName: "operational-critical"

tolerations:
  - key: dedicated
    operator: Equal
    value: "management"
    effect: NoSchedule

affinity:
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          - key: role
            operator: In
            values:
            - management
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - velero
        topologyKey:
          - "kubernetes.io/hostname"
          - "topology.kubernetes.io/zone"
          - "topology.kubernetes.io/region"
          - "*"

extraVolumes:
  - name: tmpdir
    emptyDir: {}

extraVolumeMounts:
  - name: tmpdir
    mountPath: /tmp

# Settings for Velero's prometheus metrics. Enabled by default.
metrics:
  enabled: true
  scrapeInterval: 30s
  scrapeTimeout: 10s

  service:
    annotations: {}
    labels: {}

  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8085"
    prometheus.io/path: "/metrics"

  serviceMonitor:
    enabled: true
    additionalLabels: {}
    # namespace: velero # ServiceMonitor namespace

configuration:
  provider: aws

  backupStorageLocation:
    name: default # default name: default(Optional)
    provider: aws
    bucket: BACKUP_BUCKET_NAME
    caCert: # caCert defines a base64 encoded CA
    prefix: # prefix directory
    config:
      region: REGION
      s3ForcePathStyle: true
      s3Url: https://s3.REGION.amazonaws.com
    #  kmsKeyId:

  # https://velero.io/docs/v1.5/api-types/volumesnapshotlocation/
  volumeSnapshotLocation:
    name: default # default name: default
    provider: aws
    config:
      region: REGION
  #    apitimeout:

  # These are server-level settings passed as CLI flags to the `velero server` command. Velero
  # uses default values if they're not passed in, so they only need to be explicitly specified
  # here if using a non-default value. The `velero server` default values are shown in the
  # comments below.
  # --------------------
  # `velero server` default: 1m
  backupSyncPeriod:
  # `velero server` default: 1h
  resticTimeout:
  # `velero server` default: namespaces,persistentvolumes,persistentvolumeclaims,secrets,configmaps,serviceaccounts,limitranges,pods
  restoreResourcePriorities:
  # `velero server` default: false
  restoreOnlyMode:
  # `velero server` default: 20.0
  clientQPS:
  # `velero server` default: 30
  clientBurst:
  #

  # additional key/value pairs to be used as environment variables such as "AWS_CLUSTER_NAME: 'yourcluster.domain.tld'"
  extraEnvVars:
    AWS_CLUSTER_NAME: CLUSTER_NAME
  features: EnableCSI
  logLevel: info # [ debug | info(default) | warning | error | fatal | panic ]
  logFormat: # [ text(default) | json ]

rbac:
  create: true
  clusterAdministrator: true

serviceAccount:
  server:
    create: true
    name: SERVICE_ACCOUNT
    annotations:
      eks.amazonaws.com/role-arn: IAM_ROLE_ARN

credentials:
  useSecret: false
backupsEnabled: true
snapshotsEnabled: true
deployRestic: false

restic: {}
  # podVolumePath: /var/lib/kubelet/pods
  # privileged: false
  # priorityClassName: ""
  # resources: {}
  # tolerations: []
  # annotations: {}
  # labels: {}
  # extraVolumes: []
  # extraVolumeMounts: []
  # dnsPolicy: ClusterFirst
  # securityContext:
  #   fsGroup: 1337
  # nodeSelector: {}

# Backup schedules to create.
schedules: {}
  # mybackup:
  #   labels:
  #     myenv: foo
  #   annotations:
  #     myenv: foo
  #   schedule: "0 0 * * *"
  #   template:
  #     ttl: "240h"
  #     includedNamespaces:
  #     - foo

# Velero ConfigMaps.
configMaps: {}
  # restic-restore-action-config:
  #   labels:
  #     velero.io/plugin-config: ""
  #     velero.io/restic: RestoreItemAction
  #   data:
  #     image: velero/velero-restic-restore-helper:v1.3.1

# Should be 'false' in production environment
cleanUpCRDs: CLEANUP_CRDS