existingObjstoreSecret: THANOS_SECRET_NAME

fullnameOverride: ""

## Thanos Query parameters
query:
  enabled: true
  replicaLabel: [replica]
  dnsDiscovery:
    enabled: true
    sidecarsService: "THANOS_SIDECAR_SERVICE"
    sidecarsNamespace: "PROMETHEUS_NAMESPACE"
  replicaCount: 1
  podAffinityPreset: soft
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
      - management
  tolerations:
  - key: dedicated
    operator: Equal
    value: "management"
    effect: NoSchedule
  priorityClassName: "system-cluster-critical"
  rbac:
    create: true
  pspEnabled: true
  resources:
    limits: {}
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPU: 50
    targetMemory: 50
  pdb:
    create: true
    minAvailable: 1
  ingress:
    enabled: false

## Thanos Query Frontend parameters
queryFrontend:
  enabled: true
  replicaCount: 1
  podAffinityPreset: "soft"
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
      - management
  tolerations:
  - key: dedicated
    operator: Equal
    value: "management"
    effect: NoSchedule
  priorityClassName: "system-cluster-critical"
  rbac:
    create: true
  pspEnabled: true
  resources:
    limits: {}
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}
    #   cpu: 100m
    #   memory: 128Mi
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPU: 50
    targetMemory: 50
  pdb:
    create: true
    minAvailable: 1

## Thanos Bucket Web parameters
bucketweb:
  enabled: false
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: IAM_ROLE_ARN
    existingServiceAccount: SERVICE_ACCOUNT
  replicaCount: 1
  podAffinityPreset: "soft"
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
      - management
  tolerations:
    - key: dedicated
      operator: Equal
      value: "management"
      effect: NoSchedule
  priorityClassName: "system-cluster-critical"
  resources:
    limits: {}
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}
    #   cpu: 100m
    #   memory: 128Mi
  pdb:
    create: false

## Thanos Compactor parameters
compactor:
  enabled: true
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: IAM_ROLE_ARN
    existingServiceAccount: SERVICE_ACCOUNT
  podAffinityPreset: "soft"
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
      - management
  tolerations:
    - key: dedicated
      operator: Equal
      value: "management"
      effect: NoSchedule
  priorityClassName: "system-cluster-critical"
  resources:
    limits: {}
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}
    #   cpu: 100m
    #   memory: 128Mi
  persistence:
    enabled: true
    storageClass: gp3
    size: 8Gi

## Thanos Store Gateway parameters
storegateway:
  enabled: true
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: IAM_ROLE_ARN
    existingServiceAccount: SERVICE_ACCOUNT
  replicaCount: 1
  podAffinityPreset: "soft"
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
      - management
  tolerations:
  - key: dedicated
    operator: Equal
    value: "management"
    effect: NoSchedule
  priorityClassName: "system-cluster-critical"
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  persistence:
    enabled: true
    storageClass: gp3
    size: 8Gi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 10
    targetCPU: 50
    targetMemory: 50
  pdb:
    create: true
    minAvailable: 1

## Thanos Ruler parameters
ruler:
  enabled: true
  replicaLabel: replica
  serviceAccount:
    annotations:
      eks.amazonaws.com/role-arn: IAM_ROLE_ARN
    existingServiceAccount: SERVICE_ACCOUNT
  dnsDiscovery:
    enabled: true
  alertmanagers:
    - http://ALERT_MANAGER_URL:9093
  config: |-
    groups:
      - name: "metamonitoring"
        rules:
          - alert: "PrometheusDown"
            expr: absent(up{prometheus="PROMETHEUS_NAMESPACE/PROMETHEUS_SERVICE"})
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
      - management
  tolerations:
  - key: dedicated
    operator: Equal
    value: "management"
    effect: NoSchedule
  priorityClassName: "system-cluster-critical"
  resources:
    limits: {}
    #   cpu: 100m
    #   memory: 128Mi
    requests: {}
    #   cpu: 100m
    #   memory: 128Mi
  persistence:
    enabled: true
    storageClass: gp3
    size: 8Gi
  pdb:
    create: true
    minAvailable: 1

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: PROMETHEUS_NAMESPACE

volumePermissions:
  enabled: true