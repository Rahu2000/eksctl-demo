# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

extraDeploy: []
commonLabels: {}
commonAnnotations: {}

operator:
  enabled: true

  replicaCount: 1

  updateStrategy:
    type: Recreate

  args:
    scanAllNamespaces: false
    scanNamespaces: [BIND_NAMESPACE]

  rbac:
    create: true

  serviceAccount:
    create: true
    name:

  podSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    fsGroup: 1001

  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 128Mi

  hostAliases: []
  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: 'soft'
    key: 'role'
    values:
      - management

  podAnnotations: {}
  podLabels: {}
  tolerations:
    - key: dedicated
      operator: Equal
      value: "management"
      effect: NoSchedule

  prometheus:
    serviceMonitor:
      enabled: true
      jobLabel: app.kubernetes.io/name
      metricRelabelings: []
      relabelings: []

grafana:
  enabled: true

  podSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    fsGroup: 1001
    # supplementalGroups: []

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    allowPrivilegeEscalation: false

  resources:
    limits: {}
    requests:
      cpu: 250m
      memory: 256Mi

  replicaCount: 1
  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
      - management

  tolerations:
    - key: dedicated
      operator: Equal
      value: "management"
      effect: NoSchedule

  ## The grafana-operator client-configuration for this grafana instance
  ## Ref: https://github.com/integr8ly/grafana-operator/blob/master/documentation/deploy_grafana.md#configuring-grafana-api-access
  ##
  client:
    timeout: 5
    preferService: true

  ## Configure the ingress resource that allows you to access the
  ## Grafana web. Set up the URL
  ## Ref: http://kubernetes.io/docs/user-guide/ingress/
  ## Ref: https://github.com/integr8ly/grafana-operator/blob/master/documentation/deploy_grafana.md#configuring-the-ingress-or-route
  ingress:
    enabled: false
    hostname: grafana.local
    path: /

    # labels: {}
    # annotations:
    #   kubernetes.io/ingress.class: nginx

    tls: false

    ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
    tlsSecret: grafana.local-tls

  persistence:
    enabled: true
    storageClass: gp3
    accessMode: ReadWriteOnce
    size: 10Gi

  ## This is the configuration from the grafana pod itself.
  ## every toml section is a root key
  ## Ref: https://grafana.com/docs/grafana/latest/administration/configuration/
  config:
    server:
      root_url: |-
        {{- if .Values.grafana.ingress.enabled }}
        {{ if .Values.grafana.ingress.tls }}https{{ else }}http{{ end }}://{{ .Values.grafana.ingress.hostname }}
        {{- else }}
        http://localhost:3000
        {{- end }}
    log:
      mode: "console"
      level: "warn"
    alerting:
      enabled: false
    analytics:
      reporting_enabled: false
      check_for_updates: false
    security:
      disable_initial_admin_creation: false
      disable_gravatar: false
      # ## Grafana Admin credentials, if omitted they will be admin:<random_pass>
      # admin_user:
      # admin_password:
      #
      # ## OIDC configuration
      # ##
      # auth:
      #   disable_login_form: false
      #   disable_signout_menu: false
      # auth.generic_oauth:
      #   enabled: True
      #   client_id: grafana
      #   client_secret: a391df94-dd1f-46d6-b3ab-60e90f23e8a2
      #   scopes: profile email
      #   auth_url: https://keycloak.example.com/auth/realms/master/protocol/openid-connect/auth
      #   token_url: https://keycloak.example.com/auth/realms/master/protocol/openid-connect/token
      #   api_url: https://keycloak.example.com/auth/realms/master/protocol/openid-connect/userinfo
      #   ## Automatic role handling with OIDC
      #   ##
      #   # role_attribute_path: contains(groups[*], 'platform-readonly') && 'Viewer' || contains(groups[*], 'platform-admin') && 'Admin' || contains(groups[*], 'platform-emergency') && 'Admin' || contains(groups[*], 'customer-poweruser') && 'Admin' || contains(groups[*], 'customer-collaborator') && 'Editor' || contains(groups[*], 'customer-readonly') && 'Viewer'
      #   # allowed_domains: example.com
      #   allow_sign_up: True

  ## Mount extra configmaps and secrets into the Grafana pod
  ## Ref: https://github.com/integr8ly/grafana-operator/blob/master/documentation/extra_files.md
  configMaps: []
  #  - myCustomConfigMap
  secrets: []
  #  - myCustomSecret

  jsonnetLibrarySelector:
    matchLabels:
      app.kubernetes.io/instance: '{{ .Release.Name }}'

  dashboardLabelSelectors:
    - matchLabels:
        app.kubernetes.io/instance: '{{ .Release.Name }}'

grafanaPluginInit:
  image: {}