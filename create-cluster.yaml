apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: eksworkshop
  region: ap-northeast-2
  version: "1.19"
  tags:
    env: dev

vpc:
  cidr: "192.168.0.0/16"
  autoAllocateIPv6: false
  publicAccessCIDRs: ["211.60.50.130/32"] # set your client ip
  clusterEndpoints:
    publicAccess: true
    privateAccess: true
  nat:
    gateway: Single # other options: HighlyAvailable, Disable, Single (default)

availabilityZones: ["ap-northeast-2a","ap-northeast-2b","ap-northeast-2c"]

## example of existing VPC
# vpc:
#   id: "vpc-0dd338ecf29863c55"  # (optional, must match VPC ID used for each subnet below)
#   cidr: "192.168.0.0/16"       # (optional, must match CIDR used by the given VPC)
#   subnets:
#     # must provide 'private' and/or 'public' subnets by availibility zone as shown
#     private:
#       eu-north-1a:
#         id: "subnet-0b2512f8c6ae9bf30"
#         cidr: "192.168.128.0/19" # (optional, must match CIDR used by the given subnet)
#       eu-north-1b:
#         id: "subnet-08cb9a2ed60394ce3"
#         cidr: "192.168.64.0/19"  # (optional, must match CIDR used by the given subnet)
#       eu-north-1c:
#         id: "subnet-00f71956cdec8f1dc"
#         cidr: "192.168.0.0/19"   # (optional, must match CIDR used by the given subnet)

cloudWatch:
  clusterLogging:
    enableTypes: ["audit", "authenticator"]
    # all supported types: "api", "audit", "authenticator", "controllerManager", "scheduler"
    # supported special values: "*" and "all"

iam:
  withOIDC: true
  # serviceAccounts:
  # - metadata:
  #     name: aws-load-balancer-controller
  #     namespace: kube-system
  #   wellKnownPolicies:
  #     awsLoadBalancerController: true
  # - metadata:
  #     name: cluster-autoscaler
  #     namespace: kube-system
  #     labels: {aws-usage: "cluster-ops"}
  #   attachPolicy: # inline policy can be defined along with `attachPolicyARNs`
  #     Version: "2012-10-17"
  #     Statement:
  #     - Effect: Allow
  #       Action:
  #       - "autoscaling:DescribeAutoScalingGroups"
  #       - "autoscaling:DescribeAutoScalingInstances"
  #       - "autoscaling:DescribeLaunchConfigurations"
  #       - "autoscaling:DescribeTags"
  #       - "autoscaling:SetDesiredCapacity"
  #       - "autoscaling:TerminateInstanceInAutoScalingGroup"
  #       - "ec2:DescribeLaunchTemplateVersions"
  #       Resource: '*'

# addons:
# - name: vpc-cni
#   version: 1.7.5
#   attachPolicyARNs:
#     - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

# identityProviders:
#   - name: cognito-user-pool-1
#     issuerURL: https://cognito-idp.ap-northeast-2.amazonaws.com/ap-northeast-2
#     clientID: 10basodnbu3gs9b1bf9r566btu
#     usernameClaim: email
#     type: oidc

# secretsEncryption:
#   keyARN: "arn:aws:kms:REGION:ACCOUNT_ID:alias/KMS_KEY"

nodeGroups:
  - name: spot
    minSize: 0
    maxSize: 2
    # securityGroups:
    #   - attachIDs:
    #     withShared: true
    #     withLocal: true
    # maxPodsPerNode: 10
    # ebsOptimized: true
    volumeType: gp3 # (gp2, gp3, io1, sc1, st1)
    volumeSize: 30
    # volumeName:
    # volumeEncrypted: false
    # volumeKmsKeyID:
    # volumeIOPS: 1000
    # volumeThroughput: 1000
    # preBootstrapCommands:
    # overrideBootstrapCommand:
    # cpuCredits:
    # disablePodIMDS: false
    instancesDistribution:
      # set your own max price. AWS spot instance prices no longer cross OnDemand price.
      # Comment out the field to default to OnDemand as max price.
      maxPrice: 0.02
      instanceTypes: ["t3a.medium", "t3.medium", "t2.medium"]
      onDemandBaseCapacity: 0
      onDemandPercentageAboveBaseCapacity: 0
      spotAllocationStrategy: capacity-optimized
    labels:
      role: spot
      lifecycle: Ec2Spot
      aws.amazon.com/spot: "true"
    # Stick to one AZ for all GPU nodes.
    # In case of termination, this will prevent volumes from being unavailable
    # if the new instance got spun up in another AZ.
    availabilityZones: ["ap-northeast-2a","ap-northeast-2c"]
    taints:
      spotInstance: "true:PreferNoSchedule"
    tags:
      nodegroup-role: spot
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: Ec2Spot
      k8s.io/cluster-autoscaler/node-template/label/aws.amazon.com/spot: "true"
      k8s.io/cluster-autoscaler/node-template/taint/spotInstance: "true:PreferNoSchedule"
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/eksworkshop: "owned"
    # iam:
    #   instanceProfileARN:
    #   withAddonPolicies:
    #     autoScaler: true
    #     cloudWatch: true
    #     albIngress: true
    #     imageBuilder:
    #     externalDNS:
    #     certManager:
    #     appMesh:
    #     appMeshPreview:
    #     ebs:
    #     fsx:
    #     efs:
    #     xRay:
    # clusterDNS: {}
    # bottlerocket:
    #   enableAdminContainer: {}
    #   settings: []
    privateNetworking: true
    disableIMDSv1: true
    # disablePodIMDS: true
    ssh:
      enableSsm: true
    kubeletExtraConfig:
      kubeReserved:
        cpu: "300m"
        memory: "500Mi"
        ephemeral-storage: "1Gi"
      kubeReservedCgroup: "/kube-reserved"
      systemReserved:
        cpu: "300m"
        memory: "500Mi"
        ephemeral-storage: "1Gi"
      evictionHard:
        memory.available:  "200Mi"
        nodefs.available: "10%"
      featureGates:
      #   DynamicKubeletConfig: true
        RotateKubeletServerCertificate: true # has to be enabled, otherwise it will be disabled

managedNodeGroups:
  - name: operator
    instanceType: t3.medium
    minSize: 1
    desiredCapacity: 1
    maxSize: 3
    # availabilityZones: ["us-west-2a", "us-west-2b"]
    volumeType: gp3
    volumeSize: 30
    # securityGroups:
    #   attachIDs: ["sg-1", "sg-2"]
    ssh:
      # allow: true
      enableSsm: true
    # instancesDistribution:
    #   # set your own max price. AWS spot instance prices no longer cross OnDemand price.
    #   # Comment out the field to default to OnDemand as max price.
    #   maxPrice: 11
    #   instanceTypes: ["p3dn.24xlarge"]
    #   onDemandBaseCapacity: 0
    #   onDemandPercentageAboveBaseCapacity: 0
    #   spotAllocationStrategy: capacity-optimized
    labels:
      role: operator
      node-class: "operator-node"
      lifecycle: OnDemand
    tags:
      nodegroup-role: operator
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/taint/operator: "true:NoSchedule"
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/eksworkshop: "owned"
    # iam:
    #   withAddonPolicies:
    #     externalDNS: true
    #     certManager: true
    privateNetworking: true
    # aws ssm get-parameter --name /aws/service/eks/optimized-ami/1.19/amazon-linux-2-arm64/recommended/image_id --region ap-northeast-2 --query "Parameter.Value" --output text
    # ami: ami-0ebb427ec55cc0de7
    preBootstrapCommands:
      - "sed -i '/^KUBELET_EXTRA_ARGS=/a KUBELET_EXTRA_ARGS+=\" --register-with-taints=operator=true:NoSchedule\"' /etc/eks/bootstrap.sh"
    # subnets:
    #   - private-one
    #   - private-three
    disableIMDSv1: true
    # disablePodIMDS: true
  - name: apps
    instanceType: t3.medium
    minSize: 1
    desiredCapacity: 1
    maxSize: 3
    # availabilityZones: ["us-west-2a", "us-west-2b"]
    volumeType: gp3
    volumeSize: 30
    # securityGroups:
    #   attachIDs: ["sg-1", "sg-2"]
    ssh:
      # allow: true
      enableSsm: true
    # instancesDistribution:
    #   # set your own max price. AWS spot instance prices no longer cross OnDemand price.
    #   # Comment out the field to default to OnDemand as max price.
    #   maxPrice: 11
    #   instanceTypes: ["p3dn.24xlarge"]
    #   onDemandBaseCapacity: 0
    #   onDemandPercentageAboveBaseCapacity: 0
    #   spotAllocationStrategy: capacity-optimized
    labels:
      role: applications
      node-class: "app-node"
      lifecycle: OnDemand
    tags:
      nodegroup-role: applications
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/eksworkshop: "owned"
    # iam:
    #   withAddonPolicies:
    #     externalDNS: true
    #     certManager: true
    privateNetworking: true
    disableIMDSv1: true
    # disablePodIMDS: true
    preBootstrapCommands:
      - "jq -c '. + { \"imageGCHighThresholdPercent\": 80 }' /etc/kubernetes/kubelet/kubelet-config.json > tmp.$$.json && mv tmp.$$.json /etc/kubernetes/kubelet/kubelet-config.json"
      - "jq -c '. + { \"imageGCLowThresholdPercent\": 70 }' /etc/kubernetes/kubelet/kubelet-config.json > tmp.$$.json && mv tmp.$$.json /etc/kubernetes/kubelet/kubelet-config.json"
    # subnets:
    #   - private-one
    #   - private-three
