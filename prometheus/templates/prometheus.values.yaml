---
global:
  storageClass: gp3

  labels: {}

rbac:
  create: true
  apiVersion: v1beta1
  pspEnabled: true

operator:
  enabled: true
  serviceAccount:
    create: true
    # name:

  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  # schedulerName:

  securityContext:
    enabled: true
    runAsUser: 1001
    fsGroup: 1001

  ## Prometheus Operator Service
  service:
    type: ClusterIP
    port: 8080
    # clusterIP: None # headleass Service
    # loadBalancerIP:
    # loadBalancerSourceRanges:
    # - 10.10.10.0/24
    externalTrafficPolicy: Cluster # [Cluster(default)|Local]
    annotations: {}

  ## Create a servicemonitor for the operator
  serviceMonitor:
    enabled: true
  resources:
    limits: {}
    requests: {}
  podAntiAffinityPreset: soft

  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
    - management

  tolerations:
  - key: dedicated
    operator: Equal
    value: "management"
    effect: NoSchedule

  priorityClassName: "system-cluster-critical"

  logLevel: info
  logFormat: logfmt

  configReloaderCpu: 100m
  configReloaderMemory: 25Mi

  kubeletService:
    enabled: true
    namespace: kube-system

## Deploy a Prometheus instance
prometheus:
  enabled: true

  serviceAccount:
    create: true
    name: SERVICE_ACCOUNT
    annotations:
      eks.amazonaws.com/role-arn: IAM_ROLE_ARN

  securityContext:
    enabled: true
    runAsUser: 1001
    fsGroup: 1001

  podDisruptionBudget:
    enabled: true
    minAvailable: 1

  ## Prometheus Service
  service:
    type: ClusterIP
    port: 9090
    # clusterIP: None
    # nodePort: 30090
    # loadBalancerIP:
    # loadBalancerSourceRanges:
    # - 10.10.10.0/24
    externalTrafficPolicy: Cluster
    # healthCheckNodePort:
    # stickySessions: true
    annotations: {}

  serviceMonitor:
    enabled: true
    # interval: ""
    metricRelabelings: []
    relabelings: []

  resources:
    limits: {}
    requests: {}

  podAntiAffinityPreset: hard

  nodeAffinityPreset:
    type: "hard"
    key: "role"
    values:
    - prometheus

  tolerations:
  - key: dedicated
    operator: Equal
    value: 'prometheus'
    effect: NoSchedule

  scrapeInterval: ""
  evaluationInterval: ""
  listenLocal: false
  enableAdminAPI: false

  retention: 10d
  ## Maximum size of metrics
  retentionSize: ""

  disableCompaction: THANOS_SIDECAR
  walCompression: false

  ## If true, the Operator won't process any Prometheus configuration changes
  paused: false

  replicaCount: 1

  podMetadata:
    labels: {}
    # app: prometheus
    # k8s-app: prometheus
    annotations: {}

  ## Sidecar for Amazon Managed Promtheus
  # containers:
  #   - name: aws-sigv4-proxy-sidecar
  #     image: public.ecr.aws/aws-observability/aws-sigv4-proxy:1.0
  #     args:
  #     - --name
  #     - aps
  #     - --region
  #     - us-east-1
  #     - --host
  #     - aps-workspaces.us-east-1.amazonaws.com
  #     - --port
  #     - :8005
  #     ports:
  #       - name: aws-sigv4-proxy
  #         containerPort: 8005

  remoteRead: []
  # - url: http://remote1/read
  remoteWrite: []
  ## URL for Amazon Managed Promtheus
  # - url: http://localhost:8005/workspaces/ws-69036eaf-e383-45b3-aa9a-217a4d75b190/api/v1/remote_write

  ## Prometheus StorageSpec for persistent data
  storageSpec:
    disableMountSubPath: true
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        storageClassName: gp3
  ## Prometheus persistence parameters
  # persistence:
  #   enabled: true
  #   storageClass: gp3
  #   accessModes:
  #     - ReadWriteOnce
  #   size: 8Gi

  priorityClassName: "system-cluster-critical"

  ## PrometheusRule defines recording and alerting rules for a Prometheus instance.
  additionalPrometheusRules: []
  # - name: custom-recording-rules
  #   groups:
  #     - name: sum_node_by_job
  #       rules:
  #         - record: job:kube_node_labels:sum
  #           expr: sum(kube_node_labels) by (job)
  #     - name: sum_prometheus_config_reload_by_pod
  #       rules:
  #         - record: job:prometheus_config_last_reload_successful:sum
  #           expr: sum(prometheus_config_last_reload_successful) by (pod)
  # - name: custom-alerting-rules
  #   groups:
  #     - name: prometheus-config
  #       rules:
  #         - alert: PrometheusConfigurationReload
  #           expr: prometheus_config_last_reload_successful > 0
  #           for: 1m
  #           labels:
  #             severity: error
  #           annotations:
  #             summary: "Prometheus configuration reload (instance {{ $labels.instance }})"
  #             description: "Prometheus configuration reload error\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
  #     - name: custom-node-exporter-alerting-rules
  #       rules:
  #         - alert: PhysicalComponentTooHot
  #           expr: node_hwmon_temp_celsius > 75
  #           for: 5m
  #           labels:
  #             severity: warning
  #           annotations:
  #             summary: "Physical component too hot (instance {{ $labels.instance }})"
  #             description: "Physical hardware component too hot\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"
  #         - alert: NodeOvertemperatureAlarm
  #           expr: node_hwmon_temp_alarm == 1
  #           for: 5m
  #           labels:
  #             severity: critical
  #           annotations:
  #             summary: "Node overtemperature alarm (instance {{ $labels.instance }})"
  #             description: "Physical node temperature alarm triggered\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"

  ## Thanos sidecar container configuration
  thanos:
    create: THANOS_SIDECAR
    extraArgs: []
      # - --log.level=debug

    objectStorageConfig:
      secretName: THANOS_SECRET_NAME
      secretKey: objstore.yml

    resources:
      limits: {}
      #   cpu: 100m
      #   memory: 128Mi
      requests: {}
      #   cpu: 100m
      #   memory: 128Mi

    service:
      type: ClusterIP
      port: 10901
      clusterIP: None
      annotations: {}

    ingress:
      enabled: false

    spec:
      hosts:
        - name: thanos.prometheus.local
          path: /

## Configuration for alertmanager
alertmanager:
  enabled: true

  serviceAccount:
    create: true

  securityContext:
    enabled: true
    runAsUser: 1001
    fsGroup: 1001

  podDisruptionBudget:
    enabled: false
    minAvailable: 1

  service:
    type: ClusterIP
    port: 9093
    # clusterIP: None
    # nodePort: 30093
    # loadBalancerIP:
    # loadBalancerSourceRanges:
    # - 10.10.10.0/24

    externalTrafficPolicy: Cluster
    # stickySessions: true
    annotations: {}

  serviceMonitor:
    enabled: true

  ingress:
    enabled: false

  resources:
    limits: {}
    requests: {}

  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: "soft"
    key: "role"
    values:
    - prometheus

  tolerations:
    - key: dedicated
      operator: Equal
      value: 'prometheus'
      effect: NoSchedule

  replicaCount: 1
  retention: 120h

  persistence:
    enabled: false

  paused: false

  priorityClassName: "system-cluster-critical"
  routePrefix: /
  portName: web

exporters:
  node-exporter:
    enabled: true

  kube-state-metrics:
    enabled: false

## Node Exporter deployment configuration
node-exporter:
  service:
    labels:
      jobLabel: node-exporter

  serviceMonitor:
    enabled: true
    jobLabel: jobLabel

  extraArgs:
    collector.filesystem.ignored-mount-points: "^/(dev|proc|sys|var/lib/docker/.+)($|/)"
    collector.filesystem.ignored-fs-types: "^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$"

  tolerations:
  - operator: Exists

## Component scraping the kube-apiserver
kubeApiServer:
  enabled: true

## Component scraping the kube-controller-manager
kubeControllerManager:
  enabled: true
  endpoints: []
  namespace: kube-system

  service:
    enabled: true
    port: 10252
    targetPort: 10252
    # selector:
    #   component: kube-controller-manager

  serviceMonitor:
    interval: ""
    https: false
    insecureSkipVerify: null
    serverName: null
    metricRelabelings: []
    relabelings: []

## Component scraping kube scheduler
kubeScheduler:
  enabled: true
  endpoints: []
  namespace: kube-system

  service:
    enabled: true
    port: 10251
    targetPort: 10251
    # selector:
    #   component: kube-scheduler

## Component scraping coreDns
coreDns:
  enabled: true
  namespace: kube-system
  service:
    enabled: true
    port: 9153
    targetPort: 9153
    selector:
      k8s-app: kube-dns

kubeProxy:
  enabled: true

  namespace: kube-system
  service:
    enabled: true
    port: 10249
    targetPort: 10249
    selector:
      k8s-app: kube-proxy

  serviceMonitor:
    https: true

# Component scraping for kubelet and kubelet hosted cAdvisor
kubelet:
  enabled: true
  namespace: kube-system

  serviceMonitor:
    https: true